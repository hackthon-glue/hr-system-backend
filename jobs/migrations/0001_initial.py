# Generated by Django 5.2.7 on 2025-10-18 03:42

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('candidates', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='求人タイトル')),
                ('job_code', models.CharField(max_length=50, unique=True, verbose_name='求人コード')),
                ('department', models.CharField(max_length=100, verbose_name='部署')),
                ('location', models.CharField(max_length=200, verbose_name='勤務地')),
                ('remote_work_option', models.CharField(blank=True, max_length=50, verbose_name='リモートワーク')),
                ('employment_type', models.CharField(choices=[('full_time', '正社員'), ('contract', '契約社員'), ('part_time', 'パートタイム'), ('internship', 'インターン'), ('temporary', '派遣')], max_length=20, verbose_name='雇用形態')),
                ('experience_level', models.CharField(choices=[('entry', '新卒・未経験'), ('junior', 'ジュニア（1-3年）'), ('mid', 'ミドル（3-7年）'), ('senior', 'シニア（7年以上）'), ('lead', 'リード・マネージャー')], max_length=20, verbose_name='経験レベル')),
                ('description', models.TextField(verbose_name='職務内容')),
                ('responsibilities', models.TextField(verbose_name='主な責任')),
                ('qualifications', models.TextField(verbose_name='応募資格')),
                ('preferred_qualifications', models.TextField(blank=True, verbose_name='歓迎要件')),
                ('salary_min', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='最低年収')),
                ('salary_max', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='最高年収')),
                ('salary_currency', models.CharField(default='JPY', max_length=3, verbose_name='通貨')),
                ('benefits', models.TextField(blank=True, verbose_name='福利厚生')),
                ('number_of_positions', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='募集人数')),
                ('deadline', models.DateField(blank=True, null=True, verbose_name='応募締切')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='勤務開始日')),
                ('status', models.CharField(choices=[('draft', '下書き'), ('active', '公開中'), ('paused', '一時停止'), ('closed', '募集終了'), ('filled', '採用完了')], default='draft', max_length=20, verbose_name='ステータス')),
                ('is_featured', models.BooleanField(default=False, verbose_name='注目求人')),
                ('priority', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='優先度')),
                ('view_count', models.IntegerField(default=0, verbose_name='閲覧数')),
                ('application_count', models.IntegerField(default=0, verbose_name='応募数')),
                ('published_date', models.DateTimeField(blank=True, null=True, verbose_name='公開日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('hiring_manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_jobs', to=settings.AUTH_USER_MODEL, verbose_name='採用マネージャー')),
                ('recruiters', models.ManyToManyField(blank=True, related_name='recruiting_jobs', to=settings.AUTH_USER_MODEL, verbose_name='担当リクルーター')),
            ],
            options={
                'verbose_name': '求人',
                'verbose_name_plural': '求人',
                'db_table': 'jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='JobRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requirement_type', models.CharField(choices=[('required', '必須'), ('preferred', '歓迎'), ('nice_to_have', 'あれば尚可')], max_length=20, verbose_name='要件タイプ')),
                ('category', models.CharField(max_length=50, verbose_name='カテゴリ')),
                ('description', models.TextField(verbose_name='説明')),
                ('priority', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='優先度')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='jobs.job', verbose_name='求人')),
            ],
            options={
                'verbose_name': '求人要件',
                'verbose_name_plural': '求人要件',
                'db_table': 'job_requirements',
                'ordering': ['job', '-priority'],
            },
        ),
        migrations.CreateModel(
            name='JobSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requirement_level', models.CharField(choices=[('required', '必須'), ('preferred', '歓迎')], max_length=20, verbose_name='要求レベル')),
                ('minimum_proficiency', models.CharField(choices=[('beginner', '初級'), ('intermediate', '中級'), ('advanced', '上級'), ('expert', 'エキスパート')], max_length=20, verbose_name='最低習熟度')),
                ('minimum_years', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='最低経験年数')),
                ('weight', models.IntegerField(default=1, help_text='マッチングスコア計算時の重み付け', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='重み')),
                ('notes', models.TextField(blank=True, verbose_name='備考')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_skills', to='jobs.job', verbose_name='求人')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_skills', to='candidates.skill', verbose_name='スキル')),
            ],
            options={
                'verbose_name': '求人スキル',
                'verbose_name_plural': '求人スキル',
                'db_table': 'job_skills',
                'ordering': ['-requirement_level', '-weight'],
            },
        ),
        migrations.CreateModel(
            name='JobView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IPアドレス')),
                ('user_agent', models.TextField(blank=True, verbose_name='ユーザーエージェント')),
                ('referrer', models.URLField(blank=True, verbose_name='参照元')),
                ('viewed_at', models.DateTimeField(auto_now_add=True, verbose_name='閲覧日時')),
                ('candidate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_views', to='candidates.candidate', verbose_name='候補者')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='jobs.job', verbose_name='求人')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='job_views', to=settings.AUTH_USER_MODEL, verbose_name='ユーザー')),
            ],
            options={
                'verbose_name': '求人閲覧履歴',
                'verbose_name_plural': '求人閲覧履歴',
                'db_table': 'job_views',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='総合スコア')),
                ('skill_match_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='スキルマッチスコア')),
                ('experience_match_score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='経験マッチスコア')),
                ('education_match_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='学歴マッチスコア')),
                ('culture_fit_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='カルチャーフィットスコア')),
                ('matched_skills', models.JSONField(default=list, verbose_name='マッチしたスキル')),
                ('missing_skills', models.JSONField(default=list, verbose_name='不足スキル')),
                ('extra_skills', models.JSONField(default=list, verbose_name='追加スキル')),
                ('ai_summary', models.TextField(blank=True, verbose_name='AI分析サマリー')),
                ('strengths', models.TextField(blank=True, verbose_name='強み')),
                ('weaknesses', models.TextField(blank=True, verbose_name='弱み')),
                ('recommendation', models.TextField(blank=True, verbose_name='推薦コメント')),
                ('recommendation_level', models.CharField(blank=True, choices=[('highly_recommended', '強く推薦'), ('recommended', '推薦'), ('consider', '検討可'), ('not_recommended', '非推薦')], max_length=20, verbose_name='推薦レベル')),
                ('status', models.CharField(choices=[('pending', '処理中'), ('completed', '完了'), ('failed', '失敗')], default='pending', max_length=20, verbose_name='ステータス')),
                ('calculation_method', models.CharField(blank=True, max_length=100, verbose_name='計算方法')),
                ('error_message', models.TextField(blank=True, verbose_name='エラーメッセージ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('calculated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calculated_matchings', to=settings.AUTH_USER_MODEL, verbose_name='計算実行者')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matching_results', to='candidates.candidate', verbose_name='候補者')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matching_results', to='jobs.job', verbose_name='求人')),
            ],
            options={
                'verbose_name': 'マッチング結果',
                'verbose_name_plural': 'マッチング結果',
                'db_table': 'matching_results',
                'ordering': ['-overall_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SavedJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, verbose_name='メモ')),
                ('is_notified', models.BooleanField(default=False, verbose_name='通知済み')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='保存日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_jobs', to='candidates.candidate', verbose_name='候補者')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by', to='jobs.job', verbose_name='求人')),
            ],
            options={
                'verbose_name': '保存済み求人',
                'verbose_name_plural': '保存済み求人',
                'db_table': 'saved_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['status', 'employment_type'], name='jobs_status_49cadf_idx'),
        ),
        migrations.AddIndex(
            model_name='job',
            index=models.Index(fields=['job_code'], name='jobs_job_cod_f849cb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='jobskill',
            unique_together={('job', 'skill')},
        ),
        migrations.AddIndex(
            model_name='jobview',
            index=models.Index(fields=['job', '-viewed_at'], name='job_views_job_id_4ba144_idx'),
        ),
        migrations.AddIndex(
            model_name='jobview',
            index=models.Index(fields=['candidate', '-viewed_at'], name='job_views_candida_f8d431_idx'),
        ),
        migrations.AddIndex(
            model_name='matchingresult',
            index=models.Index(fields=['job', '-overall_score'], name='matching_re_job_id_7d94bb_idx'),
        ),
        migrations.AddIndex(
            model_name='matchingresult',
            index=models.Index(fields=['candidate', '-overall_score'], name='matching_re_candida_8c36b9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='matchingresult',
            unique_together={('job', 'candidate')},
        ),
        migrations.AlterUniqueTogether(
            name='savedjob',
            unique_together={('candidate', 'job')},
        ),
    ]
